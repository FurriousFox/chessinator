breadcrumbs, say why this move
make eval more advanced

better threading?

    `    std::atomic<std::shared_ptr<std::string>> *bcrumb =
        &(std::atomic<std::shared_ptr<std::string>>(std::make_shared<std::string>("hello")));`



todo:
 test ability enpassant & castling (only testing)

 evaluation:
  ; per piece evaluation (maybe inside the possibleMoves? (reduces required calculations))
  smarter, instead of static values

fenloader: properly set worth

for every possible move:
    think of all other possible moves
    for every possible move:
        think of all other possible moves
        for every possible move:
            .......

think of what's the worst that can happen, give a worse-ness score to all of them

pick the move with the lowest worse-ness score



list of moves
think of opponent responses, choose the best for the opponent of them
    for every of opponent responses, choose best response for me



list of moves