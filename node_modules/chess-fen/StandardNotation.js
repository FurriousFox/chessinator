"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var types_1 = require("./types");
var InvalidMoveError_1 = require("./InvalidMoveError");
var utils_1 = require("./utils");
var StandardNotation = /** @class */ (function () {
    function StandardNotation(move, findPiecePieceMovableTo) {
        this.piece = types_1.Piece.Pawn;
        this.from = "";
        this.to = "";
        this.move = StandardNotation.removeSpecialCharacters(move);
        var matches = this.move.match(/([NBRQK])?([a-h][1-8])[x-]?([a-h][1-8])?([NBRQ])?/);
        if (matches) {
            this.piece = StandardNotation.toPiece(StandardNotation.pieces.includes(this.move.charAt(0)) ? this.move.charAt(0) : "P");
            this.to = matches[3] ? matches[3] : matches[2];
            this.promotion = matches[4] ? StandardNotation.toPiece(matches[4]) : undefined;
            this.from = matches[3] ? matches[2] : this.findFrom(findPiecePieceMovableTo);
        }
        else if (!StandardNotation.specialMoves.includes(this.move)) {
            throw InvalidMoveError_1.InvalidMoveError.invalid(move);
        }
    }
    StandardNotation.prototype.toMoveArgs = function (toMove) {
        if (this.move === "0-0") {
            return toMove === "white" ? utils_1.whiteShortCastling : utils_1.blackShortCastling;
        }
        else if (this.move === "0-0-0") {
            return toMove === "white" ? utils_1.whiteLongCastling : utils_1.blackLongCastling;
        }
        else if (this.promotion) {
            return {
                to: this.to,
                from: this.from,
                options: {
                    promotion: this.promotion
                }
            };
        }
        return {
            to: this.to,
            from: this.from
        };
    };
    StandardNotation.prototype.findFrom = function (findPiecesMovableTo) {
        var _this = this;
        if (!findPiecesMovableTo) {
            throw new Error("Missing findPiecesMovableTo function for short notation");
        }
        var pieces = findPiecesMovableTo(this.to, this.piece);
        if (pieces.length === 1) {
            return pieces[0].location;
        }
        else if (this.move.length === 4 && /[NBRQK][a-h1-8][a-h][1-8]/.test(this.move)) {
            var specifiedPieces = pieces.filter(function (piece) { return piece.location.includes(_this.move.charAt(1)); });
            if (specifiedPieces.length === 1) {
                return specifiedPieces[0].location;
            }
        }
        else if (pieces.length > 1) {
            throw InvalidMoveError_1.InvalidMoveError.ambiguous(this.move);
        }
        throw InvalidMoveError_1.InvalidMoveError.unreachable(this.move);
    };
    StandardNotation.toPiece = function (standardNotationPieceName) {
        return utils_1.fenPieceToPositionContent(standardNotationPieceName).split(" ")[1];
    };
    StandardNotation.removeSpecialCharacters = function (move) {
        return move.replace(/[?=+#!]*/g, '');
    };
    StandardNotation.specialMoves = ["0-0", "0-0-0"];
    StandardNotation.pieces = ["N", "B", "R", "Q", "K"];
    return StandardNotation;
}());
exports.StandardNotation = StandardNotation;
exports.default = StandardNotation;
