import { Position } from "./Position";
export declare type Coordinate = string;
export declare type Color = "white" | "black";
export declare enum Piece {
    Pawn = "pawn",
    Knight = "knight",
    Bishop = "bishop",
    Rook = "rook",
    Queen = "queen",
    King = "king"
}
export declare type Coordinate2D = {
    x: number;
    y: number;
};
export declare enum FenPiece {
    p = "p",
    n = "n",
    b = "b",
    r = "r",
    q = "q",
    k = "k",
    P = "P",
    N = "N",
    B = "B",
    R = "R",
    Q = "Q",
    K = "K"
}
export declare enum BoardContent {
    WhitePawn = "white pawn",
    WhiteKnight = "white knight",
    WhiteBishop = "white bishop",
    WhiteRook = "white rook",
    WhiteQueen = "white queen",
    WhiteKing = "white king",
    BlackPawn = "black pawn",
    BlackKnight = "black knight",
    BlackBishop = "black bishop",
    BlackRook = "black rook",
    BlackQueen = "black queen",
    BlackKing = "black king",
    EmptySquare = "empty"
}
export interface CastlingRights {
    white: {
        queenside: boolean;
        kingside: boolean;
    };
    black: {
        queenside: boolean;
        kingside: boolean;
    };
}
export declare type PositionOrCoordinate = Position | Coordinate;
export interface PieceData {
    name: Piece;
    color: Color;
    inCheck?: boolean;
    controlledSquares: Coordinate[];
    moves: Coordinate[];
    location: string;
}
export interface SquareData {
    coordinate: Coordinate;
    pieceData?: PieceData;
    controlledBy: {
        white: boolean;
        black: boolean;
    };
}
export interface MoveOptions {
    updateGameData?: boolean;
    specialMoves?: MoveArgs[];
    promotion?: Piece;
}
export interface MoveArgs {
    to: Position | Coordinate;
    from: Position | Coordinate;
    options?: MoveOptions;
}
export interface ControlledSquares {
    white: Coordinate[];
    black: Coordinate[];
}
export declare type PositionContentEvent<T> = (color: Color | null) => T;
export interface PositionContentEvents<T> {
    [piece: string]: PositionContentEvent<T>;
    empty: PositionContentEvent<T>;
}
