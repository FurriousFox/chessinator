"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Position_1 = require("./Position");
var types_1 = require("./types");
var InvalidFenError_1 = require("./InvalidFenError");
var traverse = {
    from: function (from) { return ({
        to: function (to) { return ({
            searchFor: function (predicate) {
                if (from < to) {
                    for (var i = from + 1; i < to; i++) {
                        if (predicate(i, from, to)) {
                            return true;
                        }
                    }
                }
                else {
                    for (var i = from - 1; i > to; i--) {
                        if (predicate(i)) {
                            return true;
                        }
                    }
                }
                return false;
            }
        }); }
    }); }
};
var isObstructedDiagonalPath = function (fromPosition, toPosition, fen) {
    return traverse
        .from(fromPosition.y)
        .to(toPosition.y)
        .searchFor(function (y) { return traverse
        .from(fromPosition.x)
        .to(toPosition.x)
        .searchFor(function (x) {
        return fromPosition.isDiagonalTo(new Position_1.Position(x, y)) &&
            fen.isOccupied(new Position_1.Position(x, y));
    }); });
};
var isObstructedVerticalPath = function (fromPosition, toPosition, fen) {
    return traverse
        .from(fromPosition.y)
        .to(toPosition.y)
        .searchFor(function (y) { return fen.isOccupied(new Position_1.Position(fromPosition.x, y)); });
};
var isObstructedHorizontalPath = function (fromPosition, toPosition, fen) {
    return traverse
        .from(fromPosition.x)
        .to(toPosition.x)
        .searchFor(function (x) { return fen.isOccupied(new Position_1.Position(x, fromPosition.y)); });
};
exports.isObstructedPath = function (fromPosition, toPosition, fen) {
    if (fromPosition.isDiagonalTo(toPosition)) {
        return isObstructedDiagonalPath(fromPosition, toPosition, fen);
    }
    else if (fromPosition.isVerticalTo(toPosition)) {
        return isObstructedVerticalPath(fromPosition, toPosition, fen);
    }
    else if (fromPosition.isHorizontalTo(toPosition)) {
        return isObstructedHorizontalPath(fromPosition, toPosition, fen);
    }
    return false;
};
exports.isPositiveInteger = function (string) {
    return /[0-9]/.test(string);
};
exports.isCoordinate = function (string) {
    return /[a-h][1-8]/.test(string);
};
exports.isEnPassantSquare = function (string) {
    return /^(-|[a-h][36])$/.test(string);
};
exports.isCastlingAvailability = function (string) {
    return /^(KQ?k?q?|Qk?q?|kq?|q|-)$/.test(string);
};
exports.blackShortCastling = {
    from: "e8",
    to: "g8",
    options: {
        specialMoves: [{
                from: "h8",
                to: "f8"
            }]
    }
};
exports.blackLongCastling = {
    from: "e8",
    to: "c8",
    options: {
        specialMoves: [{
                from: "a8",
                to: "d8"
            }]
    }
};
exports.whiteShortCastling = {
    from: "e1",
    to: "g1",
    options: {
        specialMoves: [{
                from: "h1",
                to: "f1"
            }]
    }
};
exports.whiteLongCastling = {
    from: "e1",
    to: "c1",
    options: {
        specialMoves: [{
                from: "a1",
                to: "d1"
            }]
    }
};
var p = types_1.FenPiece.p, n = types_1.FenPiece.n, b = types_1.FenPiece.b, r = types_1.FenPiece.r, q = types_1.FenPiece.q, k = types_1.FenPiece.k, P = types_1.FenPiece.P, N = types_1.FenPiece.N, B = types_1.FenPiece.B, R = types_1.FenPiece.R, Q = types_1.FenPiece.Q, K = types_1.FenPiece.K;
var BlackPawn = types_1.BoardContent.BlackPawn, BlackKnight = types_1.BoardContent.BlackKnight, BlackBishop = types_1.BoardContent.BlackBishop, BlackQueen = types_1.BoardContent.BlackQueen, BlackKing = types_1.BoardContent.BlackKing, BlackRook = types_1.BoardContent.BlackRook, WhitePawn = types_1.BoardContent.WhitePawn, WhiteKnight = types_1.BoardContent.WhiteKnight, WhiteBishop = types_1.BoardContent.WhiteBishop, WhiteQueen = types_1.BoardContent.WhiteQueen, WhiteKing = types_1.BoardContent.WhiteKing, WhiteRook = types_1.BoardContent.WhiteRook;
exports.positionContentToFenPiece = function (pieceName) {
    var longToShort = {
        "white pawn": P,
        "white knight": N,
        "white bishop": B,
        "white rook": R,
        "white queen": Q,
        "white king": K,
        "black pawn": p,
        "black knight": n,
        "black bishop": b,
        "black rook": r,
        "black queen": q,
        "black king": k,
    };
    if (longToShort[pieceName]) {
        return longToShort[pieceName];
    }
    throw new Error("Unknown piece " + pieceName);
};
exports.fenPieceToPositionContent = function (fenPieceName) {
    if (fenPieceName in types_1.FenPiece) {
        var longToShort = {
            p: BlackPawn,
            n: BlackKnight,
            b: BlackBishop,
            r: BlackRook,
            q: BlackQueen,
            k: BlackKing,
            P: WhitePawn,
            N: WhiteKnight,
            B: WhiteBishop,
            R: WhiteRook,
            Q: WhiteQueen,
            K: WhiteKing
        };
        return longToShort[fenPieceName];
    }
    throw new InvalidFenError_1.InvalidFenError("Unknown piece " + fenPieceName);
};
exports.toColoredPiece = function (color, piece) {
    return color + " " + piece;
};
exports.toPiece = function (pieces) {
    return pieces.split(" ")[1];
};
function positionContentEvent(positionContent, positionContentEvents) {
    if (positionContent === "empty") {
        return positionContentEvents.empty(null);
    }
    var color = positionContent.startsWith("white") ? "white" : "black";
    var piece = positionContent.split(" ")[1];
    if (piece in positionContentEvents) {
        return positionContentEvents[piece](color);
    }
    return positionContentEvents.defaultEvent(color);
}
exports.positionContentEvent = positionContentEvent;
